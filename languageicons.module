<?php
/**
 * @file
 * Icons for language links.
 *
 * This is a spin off from the Internationalization (i18n) package.
 */

/**
 * Implements hook_theme().
 */
function languageicons_theme() {
  return array(
    'languageicons_icon' => array(
      'variables' => array('language' => NULL, 'title' => NULL),
    ),
    'languageicons_place' => array(
      'variables' => array('text' => NULL, 'icon' => NULL, 'separator' => ' '),
    ),
  );
}

/**
 * Implements hook_help().
 *
 * @todo The @handbook link needs to change to a module specific one.
 */
function languageicons_help($path, $arg) {
  switch ($path) {
    case 'admin/help#languageicons':
      $output = '<p>' . t('This module manages language icons for multilingual sites:') . '</p>';
      $output .= '<ul>';
      $output .= '<li>' . t('Automatically adds icons to language links.') . '</li>';
      $output .= '<li>' . t('Provides related theme functions.') . '</li>';
      $output .= '</ul>';
      $output .= '<p>' . t('For more information, please see <a href="@handbook">the online handbook section</a>.', array('@handbook' => 'http://drupal.org/node/133977')) . '</p>';
      return $output;
    case 'admin/config/regional/language/icons':
      $output = '<p>' . t('To enable multilingual support for specific content types go to <a href="@configure_content_types">configure content types</a>.', array('@configure_content_types' => \Drupal\Core\Url::fromRoute('entity.node_type.collection'))) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_language_switch_links_alter().
 *
 * Adds language icons to language switcher block links.
 *
 * @todo Figure out a way to either ignore node links or specifically target
 *   them here. See http://drupal.org/node/1005144 for more info.
 */
function languageicons_language_switch_links_alter(array &$links, $type, $path) {
  if (\Drupal::config('languageicons.settings')->get('show_block') || \Drupal::config('languageicons.settings')->get('show_node')) {
    foreach (array_keys($links) as $langcode) {
      if (!isset($links[$langcode]['language'])) {
        $links[$langcode]['language'] = \Drupal::languageManager()->getLanguage($langcode);
      }
      languageicons_link_add($links[$langcode]);
    }
  }
}

/**
 * Add language icon to link.
 *
 * The language icon may be a different language as the destination page, can be passed in 'language_icon'.
 */
function languageicons_link_add(&$link, $title = NULL) {
  $language = isset($link['language_icon']) ? $link['language_icon'] : $link['language'];
  $title = $title ? $title : $link['title'];
  $icon = theme('languageicons_icon', array(
    'language' => $language,
    'title' => check_plain($title),
  ));
  if ($icon) {
    $link['title'] = theme('languageicons_place', array(
      'text' => check_plain($link['title']),
      'icon' => $icon,
    ));
    $link['html'] = TRUE;
  }
}

/**
 * Theme language icon.
 *
 * This function can be overridden for no language icons.
 *
 * @seealso theme_image()
 */
function theme_languageicons_icon($variables) {
  $language = $variables['language'];
  $title    = $variables['title'];

  if ($path = \Drupal::config('languageicons.settings')->get('path')) {
    $title = $title ? $title : $language->native;
    // Build up $image for theme_image() consumption.
    $image = array(
      'path' => str_replace('*', $language->language, check_plain($path)),
      'alt' => $title,
      'title' => $title,
      'attributes' => array(
        'class' => array('language-icon'),
      ),
    );
    if ($size = \Drupal\Component\Utility\Html::escape(\Drupal::config('languageicons.settings')->get('languageicons_size'))) {
      list($width, $height) = explode('x', $size);
      $image += array('width' => $width, 'height' => $height);
    }
    return theme('image', $image);
  }
}

/**
 * Theme language icon and text.
 *
 * @ingroup themeable
 */
function theme_languageicons_place($variables) {
  $text = $variables['text'];
  $icon = $variables['icon'];
  $separator = $variables['separator'];

  switch (\Drupal::config('languageicons.settings')->get('placement')) {
    case 'after':
      return $text . $separator . $icon;
    case 'replace':
      return $icon;
    case 'before':
    default:
      return $icon . $separator . $text;
  }
}
